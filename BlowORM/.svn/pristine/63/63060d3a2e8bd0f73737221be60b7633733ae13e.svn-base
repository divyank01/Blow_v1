package com.sales.core;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Iterator;
import java.util.Map;
import java.util.StringTokenizer;

import com.sales.blow.exceptions.BlownException;
import com.sales.constants.BlowConstatnts;
import com.sales.constants.BlowParam;
import com.sales.poolable.parsers.ORM_MAPPINGS_Parser.ORM_MAPPINGS;
import com.sales.poolable.parsers.ORM_MAPPINGS_Parser.ORM_MAPPINGS.Maps;
import com.sales.poolable.parsers.ORM_MAPPINGS_Parser.ORM_MAPPINGS.Maps.Attributes;

public class QuerryBuilder {

	private QuerryBuilder(){}
	private static QuerryBuilder bildr;
	protected String propBasis;
	protected BlowParam param;
	private int counter=0;
	protected static QuerryBuilder newInstance(){
		bildr=new QuerryBuilder();
		return bildr;
	}

	protected PreparedStatement getCountForPk(ORM_MAPPINGS mappings,Object obj,Connection con) throws Exception{
		StringBuffer buffer=new StringBuffer();
		buffer.append("SELECT COUNT(*) AS count FROM ");
		Maps dMap=mappings.getMapForClass(obj.getClass().getCanonicalName());
		buffer.append(dMap.getSchemaName());
		buffer.append(" WHERE ");
		buffer.append(dMap.getPkAttr().getColName()+"=?");
		System.out.println(buffer.toString());
		Object ob1=obj.getClass().getMethod(getterForField(dMap.getPkAttr().getName()), null).invoke(obj, null);
		PreparedStatement smt=con.prepareStatement(buffer.toString());
		smt.setObject(1, ob1);
		return smt;
	}


	protected PreparedStatement createInsertQuerry(ORM_MAPPINGS mappings,Object obj,Connection con) throws Exception{
		Maps dMap=mappings.getMapForClass(obj.getClass().getCanonicalName());
		StringBuilder sql=new StringBuilder();
		StringBuilder qMarks=new StringBuilder();
		sql.append("INSERT INTO ");
		sql.append(dMap.getSchemaName());
		sql.append(" (");
		qMarks.append("(");
		Map<String, Attributes> aMap=dMap.getAttributeMap();
		Iterator<String> iter=aMap.keySet().iterator();
		while(iter.hasNext()){
			String attr=iter.next();
			if(!aMap.get(attr).isFk()){
				sql.append(aMap.get(attr).getColName());
				if(aMap.get(attr).isGenerated()){
					qMarks.append(aMap.get(attr).getSeqName()+".nextval");
				}else{
					qMarks.append("?");
				}
				if(iter.hasNext()){
					qMarks.append(",");
					sql.append(",");
				}
			}
		}
		if(qMarks.charAt(qMarks.length()-1)==','){
			qMarks.deleteCharAt(qMarks.length()-1);
		}
		if(sql.charAt(sql.length()-1)==','){
			sql.deleteCharAt(sql.length()-1);
		}
		qMarks.append(")");
		sql.append(")");
		sql.append(" VALUES ");
		sql.append(qMarks.toString());
		PreparedStatement stmt=con.prepareStatement(sql.toString());
		Iterator<String> itr=aMap.keySet().iterator();
		int count=1;
		while(itr.hasNext()){
			String attr=itr.next();
			if(!aMap.get(attr).isFk() && !aMap.get(attr).isGenerated()){
				Object ob1=obj.getClass().getMethod(getterForField(aMap.get(attr).getName()), null).invoke(obj, null);
				System.out.println(aMap.get(attr).getName()+"    "+count);
				stmt.setObject(count, ob1);
				count++;
			}
		}
		//map.put(dMap.getIndex(), sql.toString());
		System.out.println(sql.toString());
		return stmt;
	}

	protected PreparedStatement createUpadteQuerry(ORM_MAPPINGS mappings,Object obj,Connection con) throws Exception{
		Maps dMap=mappings.getMapForClass(obj.getClass().getCanonicalName());
		StringBuilder sql=new StringBuilder();
		StringBuilder qMarks=new StringBuilder();
		sql.append("UPDATE ");
		sql.append(dMap.getSchemaName());
		sql.append(" SET ");
		qMarks.append("(");
		Map<String, Attributes> aMap=dMap.getAttributeMap();
		Iterator<String> iter=aMap.keySet().iterator();
		while(iter.hasNext()){
			String attr=iter.next();
			if(!aMap.get(attr).isFk()){
				sql.append(aMap.get(attr).getColName()+"=? ");
				qMarks.append("?");
				if(iter.hasNext()){
					qMarks.append(",");
					sql.append(",");
				}
			}
		}
		if(sql.charAt(sql.length()-1)==','){
			sql.deleteCharAt(sql.length()-1);
		}
		qMarks.append(")");
		sql.append(" WHERE ");
		sql.append(dMap.getPkAttr().getColName()+"="+"?");
		PreparedStatement stmt=con.prepareStatement(sql.toString());
		Iterator<String> itr=aMap.keySet().iterator();
		int count=1;
		while(itr.hasNext()){
			String attr=itr.next();
			if(!aMap.get(attr).isFk()){
				Object ob1=obj.getClass().getMethod(getterForField(aMap.get(attr).getName()), null).invoke(obj, null);
				stmt.setObject(count, ob1);
				count++;
			}
		}
		Object ob1=obj.getClass().getMethod(getterForField(dMap.getPkAttr().getName()), null).invoke(obj, null);
		if(ob1==null)
			throw new BlownException("PK attribute "+dMap.getPkAttr().getName()+" is null for "+dMap.getSchemaName());
		else
			stmt.setObject(count, ob1);
		System.out.println(sql.toString());
		return stmt;
	}

	private String getterForField(String field) {
		String retVal=(String.valueOf(field.charAt(0)).toUpperCase())+field.substring(1);
		return "get"+retVal;
	}

	protected void processParams(ORM_MAPPINGS mappings,StringBuffer sql,Map<String, ?> params2,String t,boolean useJoin,BlowParam blowParam) throws Exception {
		sql.append(BlowConstatnts.SELECT);
		StringBuilder build=new StringBuilder();
		if(mappings.getMaps().get(t)==null){
			throw new BlownException("Mapping not found for class: "+t);
		}
		if(blowParam!=null && blowParam.equals(BlowParam.LAZY))
			makeMapForAlieses(mappings.getMaps().get(t).getqMap(),build,true,mappings,t,null);
		else
			makeMapForAlieses(mappings.getMaps().get(t).getqMap(),build,false,mappings,t,null);
		String select=build.toString();
		sql.append(select.substring(0, select.length()-1)+BlowConstatnts.FROM+mappings.getMaps().get(t).getSchemaName());
		if(!params2.isEmpty()){
			Iterator<String> iter=params2.keySet().iterator();
			boolean check=true;
			if(blowParam!=null && blowParam.equals(BlowParam.LAZY)){

			}
			else{
				Iterator<String> itr=mappings.getMaps().get(t).getDependentClasses().iterator();
				while(itr.hasNext()){
					String dClz=itr.next();
					makeLOJs(mappings,t,dClz,sql,false);
				}
			}
			sql.append(BlowConstatnts.WHERE);
			int count=0;
			while(iter.hasNext()){
				String prop=iter.next();
				if(useJoin && check){				
					if(prop.contains(BlowConstatnts.DOT)){
						StringTokenizer tokens=new StringTokenizer(prop, BlowConstatnts.DOT);
						String finalSchema="";
						Map<String, Attributes> dMap=mappings.getMapForClass(t).getAttributeMap();
						while(tokens.hasMoreElements()){
							String token=tokens.nextToken();
							if(dMap.containsKey(token)){
								if(dMap.get(token).isFk()){
									finalSchema=mappings.getMapForClass(dMap.get(token).getClassName())
									.getSchemaName();
									dMap=mappings.getMapForClass(dMap.get(token).getClassName()).getAttributeMap();
								}else{
									if(count>0)
										sql.append(BlowConstatnts.AND);
									sql.append(finalSchema+BlowConstatnts.DOT+dMap.get(token).getColName());
									sql.append(BlowConstatnts.EQ);
									sql.append(BlowConstatnts.S_QT);
									sql.append(params2.get(prop));
									sql.append(BlowConstatnts.S_QT);
								}
							}else{
								throw new BlownException("Either propety not present or not complex type");
							}
						}
					}else{
						Attributes attr=mappings.getMaps().get(t).getAttributeMap().get(prop);
						if(attr==null)
							throw new BlownException("Property "+prop+" not present/mapped in class: "+t);
						if(count>0)
							sql.append(BlowConstatnts.AND);
						sql.append(BlowConstatnts.SPACE);
						sql.append(mappings.getMaps().get(t).getSchemaName());
						sql.append(BlowConstatnts.DOT);
						sql.append(attr.getColName());
						sql.append(BlowConstatnts.EQ);
						sql.append(BlowConstatnts.S_QT);
						sql.append(params2.get(prop));
						sql.append(BlowConstatnts.S_QT);
					}
				}
				else{
					sql.append(BlowConstatnts.AND);
					sql.append(BlowConstatnts.SPACE);
					sql.append(mappings.getMaps().get(t).getSchemaName());
					sql.append(BlowConstatnts.DOT);
					sql.append(mappings.getMaps().get(t).getAttributeMap().get(prop).getColName());
					sql.append(BlowConstatnts.EQ);
					sql.append(BlowConstatnts.S_QT);
					sql.append(params2.get(prop));
					sql.append(BlowConstatnts.S_QT);
				}
				count++;
			}
		}else{
			if(blowParam!=null && blowParam.equals(BlowParam.LAZY)){

			}
			else{
				Iterator<String> itr=mappings.getMaps().get(t).getDependentClasses().iterator();
				while(itr.hasNext()){
					makeLOJs(mappings, t, itr.next(), sql, false);
				}
			}
		}
	}

	private void makeLOJs(ORM_MAPPINGS mappings, String oldClass, String newClass,StringBuffer sql,boolean idDone) {
		sql.append(BlowConstatnts.LOJ);
		sql.append(mappings.getMapForClass(newClass).getSchemaName());
		sql.append(BlowConstatnts.ON+mappings.getMaps().get(oldClass).getSchemaName());
		sql.append(BlowConstatnts.DOT);
		sql.append(mappings.getMapForClass(oldClass).getFkAttr().get(newClass).getColName());
		sql.append(BlowConstatnts.EQ);
		sql.append(mappings.getMapForClass(newClass).getSchemaName());
		sql.append(BlowConstatnts.DOT);
		sql.append(mappings.getMaps().get(newClass).getFkAttr().get(oldClass).getColName());
		/*sql.append(BlowConstatnts.LOJ);
		sql.append(mappings.getMapForClass(newClass).getSchemaName());
		sql.append(BlowConstatnts.ON+mappings.getMaps().get(oldClass).getSchemaName());
		sql.append(BlowConstatnts.DOT);
		sql.append(mappings.getMapForClass(oldClass).getFkAttr().get(newClass).getColName());
		sql.append(BlowConstatnts.EQ);
		sql.append(mappings.getMapForClass(newClass).getSchemaName());
		sql.append(BlowConstatnts.DOT);
		sql.append(mappings.getMaps().get(newClass).getPkAttr().getColName());*/
		/*sql.append(BlowConstatnts.LOJ);
		sql.append(mappings.getMapForClass(newClass).getSchemaName());
		sql.append(BlowConstatnts.ON+mappings.getMaps().get(oldClass).getSchemaName());
		sql.append(BlowConstatnts.DOT);
		sql.append(mappings.getMapForClass(newClass).getPkAttr().getColName());
		sql.append(BlowConstatnts.EQ);
		sql.append(mappings.getMapForClass(newClass).getSchemaName());
		sql.append(BlowConstatnts.DOT);
		sql.append(mappings.getMaps().get(newClass).getFkAttr().get(oldClass).getColName());*/
		if(mappings.getMapForClass(newClass).haveDependents()){
			for(String clz:mappings.getMapForClass(newClass).getDependentClasses()){
				if(!clz.equalsIgnoreCase(oldClass)){
					makeLOJs(mappings, newClass, clz, sql, true);
				}
			}
		}

	}
	private StringBuilder makeMapForAlieses(Map m,StringBuilder build,boolean isDone,ORM_MAPPINGS mappings,String t,String prevClass) throws BlownException {
		Iterator<String> itr=m.keySet().iterator();
		while(itr.hasNext()){
			String str=(String)itr.next();
			build.append(str+" as "+m.get(str)+",");
		}
		if(!isDone){
			Iterator<String> iter=mappings.getMaps().get(t).getDependentClassMap().keySet().iterator();
			while(iter.hasNext()){
				String str=(String)iter.next();
				if(mappings.getMaps().get(t).getDependentClassMap().get(str)!=null){
					Maps dependentMap=mappings.getMaps().get(t).getDependentClassMap().get(str);
					if(!str.equalsIgnoreCase(prevClass)){
						if(mappings.getMaps().get(t).getDependentClassMap().get(str).haveDependents())
							makeMapForAlieses(dependentMap.getqMap(),build,false,mappings,dependentMap.getClassName(),t);
						else
							makeMapForAlieses(dependentMap.getqMap(),build,true,mappings,dependentMap.getClassName(),t);
					}
				}else
					throw new BlownException("Mappings not found for referred class :"+str);
			}
		}
		return build;
	}
}
