{
  "name": "Blow v1",
  "tagline": "It's a JAVA based ORM.",
  "body": "# Blow\r\n## A JAVA based ORM\r\nBlow is a java based orm, which is designed keeping in mind the simplicity of use for the end users.\r\n\r\n## Some Features:\r\n* Able to find out relations between classes.\r\n* Fetch data based on relationship and can be modified.\r\n* Able to generate queries for basic insert update delete and select operations.\r\n* Supports annotation based as well as XML based mappings.\r\n* No dependency on any other external library.\r\n* Able to sync in database structure.\r\n* Able to generate POJOs based on XML mappings.\r\n* Pooling heavy objects for faster run times.\r\n* Able to run queries saved in XMLs with logical operations.\r\n* Partial query pooling.\r\n\r\n## Usages\r\n### Configuration\r\nFirst create a configuration xml file named as  BLOW-ORM-CONFIG.xml with following content.\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<JDBCConnection xmlns=\"http://www.BlowORM.org/BlowConf\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://www.BlowORM.org/BlowConf ../../BlowORM/src/com/sales/xmls/BlowConf.xsd\">\r\n\r\n\t<!-- basic configs -->\r\n\t<URL>jdbc:oracle:thin:@localhost:1521:xe</URL>\r\n\t<PASSWORD>pwd</PASSWORD>\r\n\t<USER>username</USER>\r\n\t<!-- Oracle10g driver class -->\r\n\t<!-- <JDBCDriver>oracle.jdbc.driver.OracleDriver</JDBCDriver> -->\r\n\t\r\n\t<!-- Oracle11g driver class -->\r\n\t<JDBCDriver>oracle.jdbc.OracleDriver</JDBCDriver>\r\n\t\r\n\t<QUERIES>\r\n\t\t<Query file=\"com/sales/xmls/some.blow.query.xml\"/>\r\n\t\t<Query file=\"com/sales/xmls/some.blow.query.xml\"/>\r\n\t</QUERIES>\r\n\r\n\t<!-- mappings -->\r\n\t<MAPPINGS file=\"com/sales/xmls/first.blow.xml\" />\r\n\t<MAPPINGS file=\"com/sales/xmls/second.blow.xml\" />\r\n\t<!-- <MAPPINGS file=\"com/sales/xmls/three.blow.xml\"/> -->\r\n\t\r\n\t<!-- config annotation -->\r\n\t<ANNOTATIONS use=\"false\">\r\n\t\t<package-scan>com.sales.pojo</package-scan>\r\n\t\t<package-scan>com.customer.pojo</package-scan>\r\n\t</ANNOTATIONS>\r\n\r\n\t<!-- multiple schema can be mentioned for loading tables separated by comma -->\r\n\t<Schema>DIVYANK</Schema>\r\n\t<!-- generate schema -->\r\n\t<GenerateSchema>false</GenerateSchema>\r\n\t<SqlLogging>true</SqlLogging>\r\n</JDBCConnection>\r\n\r\nAfter this we need to create mappings for pojos to be mapped with database tables this can be done\r\nby two means either you can annotate the pojos or can create xml mappings with following content\r\n\r\n<Mappings xmlns=\"http://www.blow.org/Mapping\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://www.blow.org/Mapping ../../../../../BlowORM/src/com/sales/xmls/Mapping.xsd\">\r\n\t<Mapping>\r\n\t\t<Class>com.sales.pojo.Product</Class>\r\n\t\t<RDBSchema>product</RDBSchema>\r\n\t\t<Map>\r\n\t\t\t<Property name=\"id\" type=\"int\" colName=\"id\"\r\n\t\t\t\tprimary-key=\"true\" length=\"5\" generated=\"true\" seq=\"product_seq\" />\r\n\t\t\t<Property name=\"name\" type=\"String\" colName=\"name\"\r\n\t\t\t\tlength=\"50\" />\r\n\t\t\t<Property name=\"catId\" type=\"long\" colName=\"cat_id\" length=\"5\"/>\r\n\t\t\t<one-2-one name=\"details\" ref-class=\"com.sales.pojo.ProductDetails\"\r\n\t\t\t\tforeign-key=\"PROD_ID\" foreign-key-ref=\"true\" />\r\n\t\t\t<one-2-one name=\"stock\" ref-class=\"com.sales.pojo.Stock\"\r\n\t\t\t\tforeign-key=\"PROD_ID\" foreign-key-ref=\"true\" />\r\n\t\t\t<one-2-one name=\"epd\"\r\n\t\t\t\tref-class=\"com.sales.pojo.ElectronicProductDetails\" foreign-key=\"PROD_ID\"\r\n\t\t\t\tforeign-key-ref=\"true\" cascade=\"delete\"/>\r\n\t\t\t<one-2-many ref-class=\"com.sales.pojo.Stock\" name=\"stocks\"\r\n\t\t\t\tforeign-key=\"PROD_ID\" collectionType=\"list\" foreign-key-ref=\"true\" cascade=\"delete\"/>\r\n\t\t</Map>\r\n\t</Mapping>\r\n\r\n\t<Mapping>\r\n\t\t<Class>com.sales.pojo.ProductDetails</Class>\r\n\t\t<RDBSchema>product_details</RDBSchema>\r\n\t\t<Map>\r\n\t\t\t<Property name=\"id\" type=\"int\" colName=\"id\" length=\"5\"\r\n\t\t\t\tprimary-key=\"true\" generated=\"true\" seq=\"PD_SEQ\" />\r\n\t\t\t<!-- <Property name=\"prodId\" type=\"int\" length=\"5\" colName=\"PROD_ID\"/> -->\r\n\t\t\t<Property name=\"brand\" type=\"String\" colName=\"BRAND\"\r\n\t\t\t\tlength=\"100\" />\r\n\t\t\t<Property name=\"color\" type=\"String\" colName=\"COLOR\" length=\"50\"/>\r\n\t\t\t<Property name=\"productSize\" type=\"String\" colName=\"PROD_SIZE\" length=\"50\"/>\r\n\t\t\t<Property name=\"price\" type=\"int\" colName=\"PRICE\" length=\"10\"/>\r\n\t\t\t<Property name=\"material\" type=\"String\" colName=\"MATERIAL\" length=\"50\"/>\r\n\t\t\t<one-2-one name=\"product\" ref-class=\"com.sales.pojo.Product\" cascade=\"delete\"\r\n\t\t\t\tforeign-key=\"PROD_ID\" />\r\n\t\t</Map>\r\n\t</Mapping>\r\n\t<Mapping>\r\n\t\t<Class>com.sales.pojo.ElectronicProductDetails</Class>\r\n\t\t<RDBSchema>ELECTRONIC_PRODUCT_DETAILS</RDBSchema>\r\n\t\t<Map>\r\n\t\t\t<Property name=\"id\" type=\"int\" colName=\"id\"\r\n\t\t\t\tprimary-key=\"true\" generated=\"true\" seq=\"EPD_SEQ\" length=\"5\"/>\r\n\t\t\t<Property name=\"description\" type=\"String\" colName=\"ELE_DESCRIPTION\" length=\"500\"/>\r\n\t\t\t<Property name=\"techDetails\" type=\"String\" colName=\"TECH_DETAILS\" length=\"500\"/>\r\n\t\t\t<!-- <Property name=\"prodId\" type=\"int\" colName=\"PROD_ID\" length=\"5\"/> -->\r\n\t\t\t<Property name=\"brand\" type=\"String\" colName=\"BRAND\" length=\"50\"/>\r\n\t\t\t<Property name=\"color\" type=\"String\" colName=\"COLOR\" length=\"50\"/>\r\n\t\t\t<Property name=\"price\" type=\"int\" colName=\"PRICE\" length=\"10\"/>\r\n\t\t\t<Property name=\"material\" type=\"String\" colName=\"MATERIAL\" length=\"50\"/>\r\n\t\t\t<one-2-one name=\"product\" ref-class=\"com.sales.pojo.Product\"\r\n\t\t\t\tforeign-key=\"PROD_ID\" />\r\n\t\t</Map>\r\n\t</Mapping>\r\n\r\n\t<Mapping>\r\n\t\t<Class>com.sales.pojos.ElectronicProductDetails</Class>\r\n\t\t<RDBSchema>ELECTRONIC_PRODUCT_DETAILS_NEW</RDBSchema>\r\n\t\t<Map>\r\n\t\t\t<Property name=\"id\" type=\"int\" colName=\"id\"\r\n\t\t\t\tprimary-key=\"true\" generated=\"true\" seq=\"EPD_SEQ_NEW\" length=\"5\"/>\r\n\t\t\t<Property name=\"description\" type=\"String\" colName=\"ELE_DESCRIPTION\" length=\"500\"/>\r\n\t\t\t<Property name=\"techDetails\" type=\"String\" colName=\"TECH_DETAILS\" length=\"500\"/>\r\n\t\t\t<!-- <Property name=\"prodId\" type=\"int\" colName=\"PROD_ID\" length=\"5\"/> -->\r\n\t\t\t<Property name=\"brand\" type=\"String\" colName=\"BRAND\" length=\"50\"/>\r\n\t\t\t<Property name=\"color\" type=\"String\" colName=\"COLOR\" length=\"50\"/>\r\n\t\t\t<Property name=\"price\" type=\"int\" colName=\"PRICE\" length=\"10\"/>\r\n\t\t\t<Property name=\"material\" type=\"String\" colName=\"MATERIAL\" length=\"50\"/>\r\n\t\t\t<one-2-one name=\"product\" ref-class=\"com.sales.pojo.Product\"\r\n\t\t\t\tforeign-key=\"ID\" />\r\n\t\t</Map>\r\n\t</Mapping>\r\n</Mappings>\r\n\r\nfor the same Pojo for class Product\r\npackage com.sales.pojo;\r\n\r\nimport java.util.List;\r\n\r\nimport com.sales.blow.annotations.BlowId;\r\nimport com.sales.blow.annotations.BlowProperty;\r\nimport com.sales.blow.annotations.BlowSchema;\r\nimport com.sales.blow.annotations.One2Many;\r\nimport com.sales.blow.annotations.One2One;\r\n\r\n@BlowSchema(schemaName=\"PRODUCT\")\r\npublic class Prodcty {\r\n\t\r\n\t@BlowId(generated=true,seq=\"product_seq\")\r\n\t@BlowProperty(columnName=\"ID\")\r\n\tpublic int id;\r\n\t@BlowProperty(columnName=\"NAME\",length=50)\r\n\tprivate String name;\r\n\t@BlowProperty(columnName=\"CAT_ID\")\r\n\tprivate long catId;\r\n\t@One2One(fk=\"PROD_ID\",isReferenced=true)\r\n\tprivate ProductDetails details;\r\n\t@One2One(fk=\"PROD_ID\",isReferenced=true)\r\n\tprivate ElectronicProductDetails epd;\r\n\t@One2One(fk=\"PROD_ID\",isReferenced=true)\r\n\tprivate Stock stock;\r\n\t@One2Many(collectionType=\"java.util.List\",fk=\"PROD_ID\",type=\"com.sales.pojo.Stock\")\r\n\tprivate List<Stock> stocks;\r\n\tpublic int getId() {\r\n\t\treturn id;\r\n\t}\r\n\tpublic void setId(int id) {\r\n\t\tthis.id = id;\r\n\t}\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\tpublic long getCatId() {\r\n\t\treturn catId;\r\n\t}\r\n\tpublic void setCatId(long price) {\r\n\t\tthis.catId = price;\r\n\t}\r\n\tpublic ProductDetails getDetails() {\r\n\t\treturn details;\r\n\t}\r\n\tpublic void setDetails(ProductDetails details) {\r\n\t\tthis.details = details;\r\n\t}\r\n\tpublic ElectronicProductDetails getEpd() {\r\n\t\treturn epd;\r\n\t}\r\n\tpublic void setEpd(ElectronicProductDetails epd) {\r\n\t\tthis.epd = epd;\r\n\t}\r\n\tpublic Stock getStock() {\r\n\t\treturn stock;\r\n\t}\r\n\tpublic void setStock(Stock stock) {\r\n\t\tthis.stock = stock;\r\n\t}\r\n\tpublic List<Stock> getStocks() {\r\n\t\treturn stocks;\r\n\t}\r\n\tpublic void setStocks(List<Stock> stocks) {\r\n\t\tthis.stocks = stocks;\r\n\t}\r\n\t\r\n}\r\n\r\n### Getting Started\r\nGet context from core\r\n\r\n\t\tBlowContext context=BlowCore.getInstance().getContext();\r\n\r\nFor fetching data from data base you will need basis as in on what basis you wants to fetch data\r\n               \r\n                Product prod=context.BlowUtils.getBasis(Product.class).propEquals(\"id\",26).retrieveOne();\r\n\r\nAlthough above line is self explanatory we need basis on a class and then put property values to\r\nget one or many records.\r\n\r\nFor deleting a record, it can be done in one of two ways as in you have the object which you want\r\nto delete or you can set on what basis the record should be deleted.\r\n                 \r\n                 context.delete(prod);\r\n \r\n\r\n\r\n### Note\r\nCurrently tested for Oracle and will expand for other databases soon.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}